{"name": "test_frame", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchFrameException: Message: courses-iframe", "trace": "self = <selenium.webdriver.remote.switch_to.SwitchTo object at 0x0000022A5B8970E0>\nframe_reference = 'courses-iframe'\n\n    def frame(self, frame_reference: Union[str, int, WebElement]) -> None:\n        \"\"\"Switches focus to the specified frame, by index, name, or\n        webelement.\n    \n        :Args:\n         - frame_reference: The name of the window to switch to, an integer representing the index,\n                            or a webelement that is an (i)frame to switch to.\n    \n        :Usage:\n            ::\n    \n                driver.switch_to.frame('frame_name')\n                driver.switch_to.frame(1)\n                driver.switch_to.frame(driver.find_elements(By.TAG_NAME, \"iframe\")[0])\n        \"\"\"\n        if isinstance(frame_reference, str):\n            try:\n>               frame_reference = self._driver.find_element(By.ID, frame_reference)\n\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022A5B897260>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...ff7a31fdc28+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7fff2abb259d+29]\\\\n\\\\tRtlUserThreadStart [0x0x7fff2b94af78+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[id=\"courses-iframe\"]\"}\nE         (Session info: chrome=141.0.7390.55); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7a320e955+80021]\nE       \tGetHandleVerifier [0x0x7ff7a320e9b0+80112]\nE       \t(No symbol) [0x0x7ff7a2f9060f]\nE       \t(No symbol) [0x0x7ff7a2fe8854]\nE       \t(No symbol) [0x0x7ff7a2fe8b1c]\nE       \t(No symbol) [0x0x7ff7a303c927]\nE       \t(No symbol) [0x0x7ff7a301126f]\nE       \t(No symbol) [0x0x7ff7a303968a]\nE       \t(No symbol) [0x0x7ff7a3011003]\nE       \t(No symbol) [0x0x7ff7a2fd95d1]\nE       \t(No symbol) [0x0x7ff7a2fda3f3]\nE       \tGetHandleVerifier [0x0x7ff7a34cdd0d+2960461]\nE       \tGetHandleVerifier [0x0x7ff7a34c7fca+2936586]\nE       \tGetHandleVerifier [0x0x7ff7a34e8a07+3070279]\nE       \tGetHandleVerifier [0x0x7ff7a322843e+185214]\nE       \tGetHandleVerifier [0x0x7ff7a322fe8f+216527]\nE       \tGetHandleVerifier [0x0x7ff7a3217b94+117460]\nE       \tGetHandleVerifier [0x0x7ff7a3217d4f+117903]\nE       \tGetHandleVerifier [0x0x7ff7a31fdc28+11112]\nE       \tBaseThreadInitThunk [0x0x7fff2abb259d+29]\nE       \tRtlUserThreadStart [0x0x7fff2b94af78+40]\n\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <selenium.webdriver.remote.switch_to.SwitchTo object at 0x0000022A5B8970E0>\nframe_reference = 'courses-iframe'\n\n    def frame(self, frame_reference: Union[str, int, WebElement]) -> None:\n        \"\"\"Switches focus to the specified frame, by index, name, or\n        webelement.\n    \n        :Args:\n         - frame_reference: The name of the window to switch to, an integer representing the index,\n                            or a webelement that is an (i)frame to switch to.\n    \n        :Usage:\n            ::\n    \n                driver.switch_to.frame('frame_name')\n                driver.switch_to.frame(1)\n                driver.switch_to.frame(driver.find_elements(By.TAG_NAME, \"iframe\")[0])\n        \"\"\"\n        if isinstance(frame_reference, str):\n            try:\n                frame_reference = self._driver.find_element(By.ID, frame_reference)\n            except NoSuchElementException:\n                try:\n>                   frame_reference = self._driver.find_element(By.NAME, frame_reference)\n\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022A5B897260>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...ff7a31fdc28+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7fff2abb259d+29]\\\\n\\\\tRtlUserThreadStart [0x0x7fff2b94af78+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[name=\"courses-iframe\"]\"}\nE         (Session info: chrome=141.0.7390.55); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7a320e955+80021]\nE       \tGetHandleVerifier [0x0x7ff7a320e9b0+80112]\nE       \t(No symbol) [0x0x7ff7a2f9060f]\nE       \t(No symbol) [0x0x7ff7a2fe8854]\nE       \t(No symbol) [0x0x7ff7a2fe8b1c]\nE       \t(No symbol) [0x0x7ff7a303c927]\nE       \t(No symbol) [0x0x7ff7a301126f]\nE       \t(No symbol) [0x0x7ff7a303968a]\nE       \t(No symbol) [0x0x7ff7a3011003]\nE       \t(No symbol) [0x0x7ff7a2fd95d1]\nE       \t(No symbol) [0x0x7ff7a2fda3f3]\nE       \tGetHandleVerifier [0x0x7ff7a34cdd0d+2960461]\nE       \tGetHandleVerifier [0x0x7ff7a34c7fca+2936586]\nE       \tGetHandleVerifier [0x0x7ff7a34e8a07+3070279]\nE       \tGetHandleVerifier [0x0x7ff7a322843e+185214]\nE       \tGetHandleVerifier [0x0x7ff7a322fe8f+216527]\nE       \tGetHandleVerifier [0x0x7ff7a3217b94+117460]\nE       \tGetHandleVerifier [0x0x7ff7a3217d4f+117903]\nE       \tGetHandleVerifier [0x0x7ff7a31fdc28+11112]\nE       \tBaseThreadInitThunk [0x0x7fff2abb259d+29]\nE       \tRtlUserThreadStart [0x0x7fff2b94af78+40]\n\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nThe above exception was the direct cause of the following exception:\n\nbase_page = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"97b911c7735445b02332f22bc05ccd4e\")>\n\n    def test_frame(base_page):\n        driver = base_page\n>       frames.navigate_frames()\n\ntests\\test_frames.py:7: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\frames.py:11: in navigate_frames\n    driver.switch_to.frame('courses-iframe')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.switch_to.SwitchTo object at 0x0000022A5B8970E0>\nframe_reference = 'courses-iframe'\n\n    def frame(self, frame_reference: Union[str, int, WebElement]) -> None:\n        \"\"\"Switches focus to the specified frame, by index, name, or\n        webelement.\n    \n        :Args:\n         - frame_reference: The name of the window to switch to, an integer representing the index,\n                            or a webelement that is an (i)frame to switch to.\n    \n        :Usage:\n            ::\n    \n                driver.switch_to.frame('frame_name')\n                driver.switch_to.frame(1)\n                driver.switch_to.frame(driver.find_elements(By.TAG_NAME, \"iframe\")[0])\n        \"\"\"\n        if isinstance(frame_reference, str):\n            try:\n                frame_reference = self._driver.find_element(By.ID, frame_reference)\n            except NoSuchElementException:\n                try:\n                    frame_reference = self._driver.find_element(By.NAME, frame_reference)\n                except NoSuchElementException as exc:\n>                   raise NoSuchFrameException(frame_reference) from exc\nE                   selenium.common.exceptions.NoSuchFrameException: Message: courses-iframe\n\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:93: NoSuchFrameException"}, "start": 1760174983339, "stop": 1760174985472, "uuid": "a6d2ae95-c8dc-448b-b44b-1cb1bb56cef9", "historyId": "acb09de484f9c875f6e48e25336883d8", "testCaseId": "acb09de484f9c875f6e48e25336883d8", "fullName": "tests.test_frames#test_frame", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_frames"}, {"name": "host", "value": "LAPTOP-MC8860K3"}, {"name": "thread", "value": "23836-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_frames"}], "titlePath": ["tests", "test_frames.py"]}